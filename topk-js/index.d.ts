/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Client {
  constructor(config: ClientConfig)
  collections(): CollectionsClient
}

export declare class CollectionsClient {
  list(): Promise<Array<Collection>>
  create(options: CreateCollectionOptions): Promise<Collection>
}

export interface ClientConfig {
  apiKey: string
  region: string
  host?: string
  https?: boolean
}

export interface ClientConfig {
  apiKey: string
  region: string
  host?: string
  https?: boolean
}

export interface Collection {
  name: string
  orgId: string
  projectId: string
  schema: Record<string, FieldSpec>
  region: string
}

export interface CreateCollectionOptions {
  name: string
  schema: Record<string, FieldSpec>
}

export declare const enum DataType {
  Text = 'Text',
  Integer = 'Integer',
  Float = 'Float',
  Boolean = 'Boolean',
  F32Vector = 'F32Vector',
  U8Vector = 'U8Vector',
  BinaryVector = 'BinaryVector',
  Bytes = 'Bytes'
}

export type FieldIndex =
  | { type: 'Keyword', indexType: number }
  | { type: 'Vector', metric: number }
  | { type: 'Semantic', model?: string, embeddingType?: number }

export interface FieldSpec {
  dataType: DataType
  required: boolean
  index?: FieldIndex
}

export interface KeywordIndex {
  indexType: number
}

export interface Schema {
  schema: Record<string, string>
}

export interface SemanticIndex {
  /** Model to be used for embedding text to vectors. */
  model?: string
  /** Data type of the embedding vectors. */
  embeddingType?: number
}

export interface VectorIndex {
  /** Distance metric */
  metric: number
}
