/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Client {
  constructor(config: ClientConfig)
  collections(): CollectionsClient
  collection(name: string): CollectionClient
}

export declare class CollectionClient {
  query(query: Query, lsn?: number | undefined | null): Promise<Array<Document>>
}

export declare class CollectionsClient {
  list(): Promise<Array<Collection>>
  create(options: CreateCollectionOptions): Promise<Collection>
  delete(name: string): Promise<void>
}

export declare class Document {

}

export interface ClientConfig {
  apiKey: string
  region: string
  host?: string
  https?: boolean
}

export interface Collection {
  name: string
  orgId: string
  projectId: string
  schema: Record<string, FieldSpec>
  region: string
}

export interface CreateCollectionOptions {
  name: string
  schema: Record<string, FieldSpec>
}

export declare const enum DataType {
  Text = 'Text',
  Integer = 'Integer',
  Float = 'Float',
  Boolean = 'Boolean',
  F32Vector = 'F32Vector',
  U8Vector = 'U8Vector',
  BinaryVector = 'BinaryVector',
  Bytes = 'Bytes'
}

export declare const enum EmbeddingDataType {
  F32 = 'F32',
  U8 = 'U8',
  /** Binary quantized uint8 */
  Binary = 'Binary'
}

export type FieldIndex =
  | { type: 'Keyword' }
  | { type: 'Vector', metric: VectorFieldIndexMetric }
  | { type: 'Semantic', model?: string, embeddingType: EmbeddingDataType }

export interface FieldSpec {
  dataType: DataType
  required: boolean
  index?: FieldIndex
}

export type FunctionExpression =
  | { type: 'KeywordScore' }
  | { type: 'VectorScore', field: string, query: VectorQuery }
  | { type: 'SemanticSimilarity', field: string, query: string }

export type LogicalExpression =
  | { type: 'Null' }
  | { type: 'Field', name: string }
  | { type: 'Literal', value: string }
  | { type: 'And', left: LogicalExpression, right: LogicalExpression }
  | { type: 'Or', left: LogicalExpression, right: LogicalExpression }

export interface Query {
  stages: Array<Stage>
}

export type SelectExpression =
  | { type: 'Logical', expr: LogicalExpression }
  | { type: 'Function', expr: FunctionExpression }

export declare function semanticSimilarity(field: string, query: string): FunctionExpression

export type Stage =
  | { type: 'Select', exprs: Record<string, SelectExpression> }
  | { type: 'Count' }
  | { type: 'Rerank', model?: string, query?: string, fields: Array<string>, topkMultiple?: number }

export type Value =
  | { type: 'String', field0: string }
  | { type: 'F64', field0: number }

export declare const enum VectorFieldIndexMetric {
  Cosine = 'Cosine',
  Euclidean = 'Euclidean',
  DotProduct = 'DotProduct',
  Hamming = 'Hamming'
}

export type VectorQuery =
  | { type: 'F32', vector: Array<number> }
  | { type: 'U8', vector: Array<number> }
